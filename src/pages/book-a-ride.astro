---
export const prerender = false;

import Layout from "../layouts/Layout.astro";
import { promises as fs } from 'fs';
import path from 'path';

const turnstileSiteKey = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY;
const turnstileSecretKey = import.meta.env.TURNSTILE_SECRET_KEY;
const supabaseUrl = import.meta.env.SUPABASE_URL;
const supabaseApiKey = import.meta.env.SUPABASE_API_KEY;
var responseMessage = "";
if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const token = data.get("cf-turnstile-response");

    let formData = new FormData();
    formData.append("secret", turnstileSecretKey);
    formData.append("response", token);

    const result = await fetch(
      "https://challenges.cloudflare.com/turnstile/v0/siteverify",
      {
        body: formData,
        method: "POST",
      },
    );
    const outcome = await result.json();

    if (!outcome.success) {
      responseMessage = "Turnstile verification failed. Please try again.";
    } else {
      await sendAdminEmail(data);
      await sendSubmitterEmail(data);
      responseMessage = "Thanks for reaching out.";
    }
  } catch (error) {
    responseMessage = "An error occurred. Please try again later.";
  }
}

async function sendAdminEmail(data) {
  // Read the email template
  const templatePath = path.resolve('../email-template/admin.html');
  let template = await loadTemplate(templatePath);

  // Replace placeholders with actual data
  const formattedDate = new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "numeric",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
    second: "numeric",
    timeZone: "UTC",
  }).format(new Date(data.get("pickup_date")));

  const message = template
    .replace('{{full_name}}', data.get('full_name'))
    .replace('{{email}}', data.get('email'))
    .replace('{{phone}}', data.get('phone'))
    .replace('{{pickup_address}}', data.get('pickup_address'))
    .replace('{{formatted_date}}', formattedDate)
    .replace('{{dropoff_address}}', data.get('dropoff_address'))
    .replace('{{passengers}}', data.get('passengers'))
    .replace('{{bags}}', data.get('bags'))
    .replace('{{preferred_vehicle}}', data.get('preferred_vehicle'))
    .replace('{{flight_number}}', data.get('flight_number'))
    .replace('{{child_seat}}', data.get('child_seat') == null ? "No" : "Yes")
    .replace('{{booster_seat}}', data.get('booster_seat') == null ? "No" : "Yes")
    .replace('{{comments}}', data.get('comments'));
    await sendEmail('hassaan@swyftlogic.org', 'Hassaan', message);
  // await sendEmail(import.meta.env.EMAIL_TO, import.meta.env.NAME_TO, message);
}

async function sendSubmitterEmail(data) {
  const templatePath = path.resolve('../email-template/submitter.html');
  let template = await loadTemplate(templatePath);

  template = template.replace('{{full_name}}', data.get("full_name"));

  await sendEmail(data.get("email"), data.get("full_name"), template);
}

async function sendEmail(emailTo, nameTo, message) {
  const response = await fetch("https://api.mailchannels.net/tx/v1/send", {
    method: "POST",
    headers: {
      "content-type": "application/json",
    },
    body: JSON.stringify({
      personalizations: [
        {
          to: [
            { email: emailTo, name: nameTo},
          ],
        },
      ],
      from: {
        email: import.meta.env.EMAIL_FROM,
        name: import.meta.env.NAME_FROM,
      },
      subject: "Orlando Superior Transportation",
      content: [
        {
          type: "text/html",
          value: message,
        },
      ],
    }),
  });
}

async function loadTemplate(templatePath) {
  return fs.readFile(templatePath, 'utf-8');
}
---

<meta
  name="description"
  content="Elevate your travel experience in Orlando. Reserve your ride today with Orlando Superior Transportation."
/>

<Layout title="Online Reservation - Book A Trip In Orlando">
  <svelte:head>
    <script
      src="https://challenges.cloudflare.com/turnstile/v0/api.js"
      async
      defer></script>
  </svelte:head>
  <!-- component -->
  <div class="container max-w-screen-lg mx-auto">
    <h1 class="text-center pt-4 pb-3 mt-3 text-4xl md:text-4xl font-extrabold">
      Book a Trip with <span class="text-yellow-700"
        >Orlando Superior Transportation</span
      >
    </h1>

    <div
      class="bg-white rounded shadow-lg p-4 px-4 md:p-8 mb-6 max-w-4xl mx-auto"
    >
      <div class="text-gray-600 text-center">
        <h2 class="font-medium text-2xl">Make an Online Reservation</h2>
        <p class="pb-4">
          Booking Online With Orlando Superior Transportation Services Is Fast,
          Easy, & Secure.
        </p>
      </div>
      {
        responseMessage !== "" && (
          <div class="font-regular relative block w-full rounded-lg bg-green-500 px-4 py-4 text-base text-white">
            <div class="absolute top-4 left-4">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="currentColor"
                aria-hidden="true"
                class="mt-px h-6 w-6"
              >
                <path
                  fill-rule="evenodd"
                  d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm13.36-1.814a.75.75 0 10-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 00-1.06 1.06l2.25 2.25a.75.75 0 001.14-.094l3.75-5.25z"
                  clip-rule="evenodd"
                />
              </svg>
            </div>
            <div class="ml-8 mr-12">
              <h5 class="block text-lg leading-snug tracking-normal text-white antialiased">
                {responseMessage}
              </h5>
            </div>
          </div>
        )
      }
      <div class=""></div>
      <div id="alertTemplate" class="space-y-4"></div>
      <form method="POST">
        <input type="text" id="sessionId" value="" style="display:none;" />
        <div class="flex flex-col grid grid-cols-6 gap-4">
          <div class="col-span-6 lg:col-span-2 mt-2">
            <label for="full_name">Full Name</label>
            <input
              type="text"
              required
              name="full_name"
              id="full_name"
              class="h-10 border mt-1 rounded w-full bg-gray-50 capture"
              value=""
            />
          </div>

          <div class="col-span-3 lg:col-span-2 mt-2">
            <label for="email">Email Address</label>
            <input
              type="email"
              required
              name="email"
              id="email"
              class="h-10 border mt-1 rounded w-full bg-gray-50 capture"
              value=""
              placeholder="email@domain.com"
            />
          </div>

          <div class="col-span-3 lg:col-span-2 mt-2">
            <label for="Phone">Phone No.</label>
            <input
              type="tel"
              required
              name="phone"
              id="phone"
              class="h-10 border mt-1 rounded w-full bg-gray-50 capture"
              value=""
            />
          </div>

          <div class="col-span-6 lg:col-span-4 mt-2">
            <label for="pickup_address">Pick Up Address</label>
            <input
              type="text"
              required
              name="pickup_address"
              id="pickup_address"
              class="h-10 border mt-1 rounded w-full bg-gray-50 capture"
              value=""
              placeholder=""
            />
          </div>

          <div class="col-span-6 lg:col-span-2 mt-2">
            <label for="pickup_date">Pick Up Date Time</label>
            <input
              type="datetime-local"
              required
              name="pickup_date"
              id="pickup_date"
              class="h-10 border mt-1 rounded w-full bg-gray-50 capture"
              value={(function () {
                const currentDate = new Date();
                const newDate = new Date(currentDate.getTime() + 30 * 60000);
                return newDate.toISOString().slice(0, 16);
              })()}
              placeholder=""
            />
          </div>

          <div class="col-span-6 lg:col-span-4 mt-2">
            <label for="dropoff_address">Drop Off Address</label>
            <input
              type="text"
              required
              name="dropoff_address"
              id="dropoff_address"
              class="h-10 border mt-1 rounded w-full bg-gray-50 capture"
              value=""
              placeholder=""
            />
          </div>

          <div class="col-span-3 lg:col-span-1 mt-2">
            <label for="passengers">Passengers</label>
            <div
              class="h-10 w-33 bg-gray-50 flex border border-gray-200 rounded items-center mt-1"
            >
              <button
                type="button"
                data-action="decrement"
                tabindex="-1"
                class="cursor-pointer outline-none focus:outline-none border-r border-gray-200 transition-all text-gray-500 hover:text-blue-600"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-4 w-4 mx-2"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                    clip-rule="evenodd"></path>
                </svg>
              </button>
              <input
                name="passengers"
                required
                id="passengers"
                placeholder="0"
                class="border-0 px-2 text-center appearance-none outline-none text-gray-800 w-full bg-transparent capture"
                value="0"
              />
              <button
                type="button"
                data-action="increment"
                tabindex="-1"
                class="cursor-pointer outline-none focus:outline-none border-l border-gray-200 transition-all text-gray-500 hover:text-blue-600"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-4 w-4 mx-2 fill-current"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z"
                    clip-rule="evenodd"></path>
                </svg>
              </button>
            </div>
          </div>

          <div class="col-span-3 lg:col-span-1 mt-2">
            <label for="bags">Bags</label>
            <div
              class="h-10 w-33 bg-gray-50 flex border border-gray-200 rounded items-center mt-1"
            >
              <button
                type="button"
                data-action="decrement"
                tabindex="-1"
                class="cursor-pointer outline-none focus:outline-none border-r border-gray-200 transition-all text-gray-500 hover:text-blue-600"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-4 w-4 mx-2"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                    clip-rule="evenodd"></path>
                </svg>
              </button>
              <input
                name="bags"
                required
                id="bags"
                placeholder="0"
                class="border-0 px-2 text-center appearance-none outline-none text-gray-800 w-full bg-transparent capture"
                value="0"
              />
              <button
                type="button"
                data-action="increment"
                tabindex="-1"
                class="cursor-pointer outline-none focus:outline-none border-l border-gray-200 transition-all text-gray-500 hover:text-blue-600"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-4 w-4 mx-2 fill-current"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z"
                    clip-rule="evenodd"></path>
                </svg>
              </button>
            </div>
          </div>

          <div class="col-span-3 lg:col-span-2 mt-2">
            <label for="pickup_address">Preferred Vehicle</label>
            <select
              name="preferred_vehicle"
              id="preferred_vehicle"
              class="h-10 border mt-1 rounded w-full bg-gray-50 capture"
              value=""
            >
              <option value="Town Car">Town Car</option>
              <option value="SUV">SUV</option>
              <option value="Van">Van</option>
              <option value="Mini Van">Mini Van</option>
              <option value="Limosine">Limosine</option>
            </select>
          </div>

          <div class="col-span-3 lg:col-span-2 mt-2">
            <label for="flight_number">Flight Number</label>
            <input
              type="text"
              name="flight_number"
              id="flight_number"
              class="transition-all flex items-center h-10 border mt-1 rounded w-full bg-gray-50 capture"
              placeholder=""
              value=""
            />
          </div>

          <div class="col-span-3 lg:col-span-1 flex align-item-end mt-2">
            <div class="inline-flex items-center">
              <input
                type="checkbox"
                name="child_seat"
                id="child_seat"
                class="form-checkbox capture"
              />
              <label for="child_seat" class="ml-2">Child Seat</label>
            </div>
          </div>

          <div class="col-span-3 lg:col-span-1 flex align-item-center mt-2">
            <div class="inline-flex items-center">
              <input
                type="checkbox"
                name="booster_seat"
                id="booster_seat"
                class="form-checkbox capture"
              />
              <label for="booster_seat" class="ml-2">Booster Seat</label>
            </div>
          </div>

          <div class="col-span-6 mt-2">
            <label for="comments">Customer Comments Or Special Requests</label>
            <textarea
              name="comments"
              id="comments"
              class="h-30 border mt-1 rounded w-full bg-gray-50 capture"
              value=""
              placeholder=""></textarea>
          </div>

          <div
            class="cf-turnstile"
            data-sitekey={turnstileSiteKey}
            data-size="compact"
          >
          </div>

          <div class="col-span-6 text-right">
            <div class="block md:inline-flex items-end">
              <button
                type="submit"
                id="btn-submit"
                class="w-full leading-4 py-3 md:py-2 text-2lg bg-transparent hover:bg-indigo-600 border-4 border-indigo-600 px-6 text-center rounded-full text-black hover:text-white"
                >Submit</button
              >
            </div>
          </div>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script lang="ts" type="module" define:vars={{ supabaseUrl, supabaseApiKey }}>
  var SESSION_PREFIX = "form";
  function decrement(e) {
    const btn = e.target.parentNode.parentElement.querySelector(
      'button[data-action="decrement"]',
    );
    const target = btn.nextElementSibling;
    let value = Number(target.value);
    if (value > 0) {
      value--;
      target.value = value;
      var prefixedKey = SESSION_PREFIX + target.id;
      window.sessionStorage.setItem(prefixedKey, target.value);
      updateData(uniqueId, target.id, target.value);
    }
  }

  function increment(e) {
    const btn = e.target.parentNode.parentElement.querySelector(
      'button[data-action="increment"]',
    );
    const target = btn.previousElementSibling;
    let value = Number(target.value);
    value++;
    target.value = value;
    var prefixedKey = SESSION_PREFIX + target.id;
    window.sessionStorage.setItem(prefixedKey, target.value);
    updateData(uniqueId, target.id, target.value);
  }

  const decrementButtons = document.querySelectorAll(
    `button[data-action="decrement"]`,
  );

  const incrementButtons = document.querySelectorAll(
    `button[data-action="increment"]`,
  );

  decrementButtons.forEach((btn) => {
    btn.addEventListener("click", decrement);
  });

  incrementButtons.forEach((btn) => {
    btn.addEventListener("click", increment);
  });

  function generateUUID() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
      /[xy]/g,
      function (c) {
        var r = (Math.random() * 16) | 0,
          v = c == "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
      },
    );
  }

  let uniqueId = window.sessionStorage.getItem("uniqueId");
  if (!uniqueId) {
    uniqueId = generateUUID();
    window.sessionStorage.setItem("uniqueId", uniqueId);
    saveUUID(uniqueId);
    document.getElementById("sessionId").value = uniqueId;
  } else {
    document.getElementById("sessionId").value = uniqueId;
  }

  var inputs = document.querySelectorAll(".capture");

  inputs.forEach(function (input) {
    input.addEventListener("blur", function () {
      // Loop through all inputs with the capture class
      inputs.forEach(function (captureInput) {
        var prefixedKey = SESSION_PREFIX + captureInput.id;
        if (captureInput.type === "checkbox") {
          window.sessionStorage.setItem(
            prefixedKey,
            captureInput.checked.toString(),
          );
          updateData(
            uniqueId,
            captureInput.id,
            captureInput.checked.toString(),
          );
        } else {
          if (captureInput.value) {
            window.sessionStorage.setItem(prefixedKey, captureInput.value);
            updateData(uniqueId, captureInput.id, captureInput.value);
          }
        }
      });
    });
  });

  function getElementKeys() {
    var sessionKeys = Object.keys(window.sessionStorage);
    return sessionKeys.filter((key) => key.startsWith(SESSION_PREFIX));
  }

  function setValuesToInputs() {
    var elementKeys = getElementKeys();

    elementKeys.forEach(function (key) {
      var element = document.getElementById(key.replace(SESSION_PREFIX, ""));
      var storedValue = window.sessionStorage.getItem(key);
      if (element) {
        if (element.type === "checkbox") {
          element.checked = storedValue === "true";
        } else {
          element.value = storedValue;
        }
      }
    });
  }

  // document.getElementById("btn-submit").addEventListener("click", () => {
  //   getElementKeys().forEach((key) => window.sessionStorage.removeItem(key));
  // });

  setValuesToInputs();

  function saveUUID(uuid) {
    const endpoint = supabaseUrl + "/websiteleads";
    const data = {
      uuid,
    };

    fetch(endpoint, {
      method: "POST",
      headers: {
        apikey: supabaseApiKey,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
  }

  function updateData(uuid, key, value) {
    const endpoint = `${supabaseUrl}/websiteleads?uuid=eq.${uuid}`;
    const data = {
      [key]: value,
    };

    fetch(endpoint, {
      method: "PATCH",
      headers: {
        apikey: supabaseApiKey,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
  }
</script>
